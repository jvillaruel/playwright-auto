"use strict";
/*
  Copyright (c) Microsoft Corporation.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.PwComboElement = void 0;
const events_1 = require("./events");
const dom_1 = require("./dom");
const listView_1 = require("./listView");
// @ts-ignore
const codicon_css_1 = require("!css-loader!../third_party/vscode/codicon.css");
// @ts-ignore
const pwCombo_css_1 = require("!css-loader!./pwCombo.css");
// @ts-ignore
const listView_css_1 = require("!css-loader!./listView.css");
class PwComboElement extends HTMLElement {
    constructor() {
        super();
        this._options = [];
        this._onChangedEmitter = new events_1.EventEmitter();
        this.onChanged = this._onChangedEmitter.event;
        this._shadowRoot = this.attachShadow({ mode: 'open', delegatesFocus: false });
        this._shadowRoot.appendChild(dom_1.dom `
      ${PwComboElement.stylesFragment()}
      <input type="text" spellcheck="false">
      <div class="codicon codicon-chevron-down"></div>
    `);
        this.input = this._shadowRoot.querySelector('input');
        this.input.addEventListener('input', () => this._onChangedEmitter.fire('input'));
        const icon = this._shadowRoot.querySelector('.codicon');
        icon.addEventListener('click', () => {
            const rect = this.getBoundingClientRect();
            this._listView.clear();
            this._listView.appendAll(this._options);
            this._menuElement.style.width = rect.width + 'px';
            this._menuElement.style.left = rect.left + 'px';
            this._menuElement.style.setProperty('--top', (rect.bottom + 1) + 'px');
            document.body.appendChild(this._glassPane);
            this._glassPane.focus();
        });
        this._listView = new listView_1.ListView({ render: option => this._renderOption(option) });
        this._menuElement = dom_1.dom `<div class="hbox pw-combo-menu">${this._listView.element}</div>`;
        this._glassPane = createGlassPane();
        const shadowRoot = this._glassPane.attachShadow({ mode: 'open', delegatesFocus: false });
        shadowRoot.appendChild(PwComboElement.stylesFragment());
        shadowRoot.appendChild(this._menuElement);
        this._glassPane.addEventListener('keydown', e => {
            if (e.key === 'Escape')
                this._hideMenu();
            e.stopPropagation();
            e.preventDefault();
        });
        this._glassPane.addEventListener('mousedown', e => {
            this._hideMenu();
            e.stopPropagation();
        });
        this._menuElement.addEventListener('mousedown', e => {
            e.stopPropagation();
        });
    }
    value() {
        return this.input.value;
    }
    setValue(value) {
        this.input.value = value;
    }
    options() {
        return this._options.slice();
    }
    setOptions(options) {
        this._options = options.map(o => typeof o === 'string' ? { value: o } : o);
    }
    focus() {
        this.input.focus();
    }
    _renderOption(option) {
        const label = option.label === undefined ? option.value : option.label;
        const item = dom_1.dom `
      <div class="hbox pw-combo-menu-item" title="${label}">
        <span>${label}</span>${option.subtitle ? dom_1.dom `<span class=subtitle>${option.subtitle}</span>` : undefined}
      </div>
    `;
        item.addEventListener('click', event => {
            event.stopPropagation();
            event.preventDefault();
            this._hideMenu();
            this.input.value = option.value;
            this._onChangedEmitter.fire('option');
        });
        return item;
    }
    _hideMenu() {
        this._glassPane.remove();
        this.input.focus();
    }
}
exports.PwComboElement = PwComboElement;
PwComboElement.tagName = 'pw-combo';
PwComboElement.styles = [codicon_css_1.default, pwCombo_css_1.default, listView_css_1.default];
function createGlassPane() {
    const pane = document.createElement('div');
    pane.style.position = 'absolute';
    pane.style.top = '0';
    pane.style.bottom = '0';
    pane.style.left = '0';
    pane.style.right = '0';
    pane.style.zIndex = '1000';
    pane.setAttribute('tabIndex', '0');
    return pane;
}
//# sourceMappingURL=pwCombo.js.map
"use strict";
/*
  Copyright (c) Microsoft Corporation.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfirmDialog = exports.AlertDialog = exports.PromptDialog = exports.Dialog = void 0;
const dom_1 = require("./dom");
const events_1 = require("./events");
const currentDialogSymbol = Symbol();
class Dialog {
    constructor(content, root) {
        this._onHideEmitter = new events_1.EventEmitter();
        this.onHide = this._onHideEmitter.event;
        this._root = root || document.documentElement;
        this._content = content;
    }
    _show() {
        if (this._root[currentDialogSymbol])
            throw new Error('Cannot show dialog when previous is still pending');
        this._root[currentDialogSymbol] = this;
        const element = dom_1.dom `
      <dialog-view>
        <dialog-view-content>
          ${this._content}
        </dialog-view-content>
      </dialog-view>
    `;
        element.$('dialog-view-content').addEventListener('mousedown', e => {
            e.stopPropagation();
        });
        element.addEventListener('mousedown', e => {
            this._hide();
        });
        element.addEventListener('keydown', e => {
            if (e.key === 'Escape')
                this._hide();
        }, false);
        this._root.appendChild(element);
        const tabindex = element.querySelector('[tabindex]');
        if (tabindex)
            tabindex.focus();
        this._element = element;
    }
    _hide(result, skipEvent) {
        if (this._root[currentDialogSymbol] !== this)
            throw new Error('There is no dialog to close!');
        this._root[currentDialogSymbol] = undefined;
        this._element.remove();
        this._element = undefined;
        if (!skipEvent)
            this._onHideEmitter.fire(result);
    }
    show() {
        return new Promise(f => {
            const disposable = this.onHide(result => {
                disposable();
                f(result);
            });
            this._show();
        });
    }
    hide() {
        this._hide(undefined, true);
    }
}
exports.Dialog = Dialog;
class PromptDialog extends Dialog {
    constructor(placeholder, options, root) {
        const dialogElement = dom_1.dom `
      <dialog-prompt>
        <message hidden="${!options || !options.message}">${options ? options.message : ''}</message>
        <input class=prompt tabindex=0 type=text placeholder=${placeholder || ''}></input>
      </dialog-prompt>`;
        const input = dialogElement.$('input');
        input.addEventListener('keydown', event => {
            if (event.key !== 'Enter')
                return;
            event.stopPropagation();
            event.preventDefault();
            this._hide(input.value);
        });
        if (options && options.value !== undefined)
            input.value = options.value;
        if (options && options.selectionStart !== undefined)
            input.selectionStart = options.selectionStart;
        if (options && options.selectionEnd !== undefined)
            input.selectionEnd = options.selectionEnd;
        super(dialogElement, root);
    }
}
exports.PromptDialog = PromptDialog;
class AlertDialog extends Dialog {
    constructor(message, root) {
        const dialogElement = dom_1.dom `
      <dialog-alert>
        <message>${message}</message>
        <button tabIndex=0>OK</button>
      </dialog-alert>`;
        const button = dialogElement.$('button');
        button.addEventListener('click', () => this._hide(true));
        super(dialogElement, root);
    }
}
exports.AlertDialog = AlertDialog;
class ConfirmDialog extends Dialog {
    constructor(message, root) {
        const dialogElement = dom_1.dom `
      <dialog-confirm>
        <message>${message}</message>
        <button-row>
          <button class="ok" tabIndex=0>OK</button>
          <button class="cancel" tabIndex=0>Cancel</button>
        </button-row>
      </dialog-confirm>`;
        dialogElement.$('.ok').addEventListener('click', () => this._hide(true));
        dialogElement.$('.cancel').addEventListener('click', () => this._hide(false));
        super(dialogElement, root);
    }
}
exports.ConfirmDialog = ConfirmDialog;
//# sourceMappingURL=dialog.js.map
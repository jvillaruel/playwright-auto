"use strict";
/*
  Copyright (c) Microsoft Corporation.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabbedPane = void 0;
const dom_1 = require("./dom");
const listView_1 = require("./listView");
const toolbarView_1 = require("./toolbarView");
const events_1 = require("./events");
class TabbedPane {
    constructor() {
        this._onSelectedEmitter = new events_1.EventEmitter();
        this._onDeletedEmitter = new events_1.EventEmitter();
        this._onCloseRequestEmitter = new events_1.EventEmitter();
        this.onSelected = this._onSelectedEmitter.event;
        this.onDeleted = this._onDeletedEmitter.event;
        this.onCloseRequest = this._onCloseRequestEmitter.event;
        this._tabStrip = new listView_1.ListView(this, {
            orientation: 'horizontal'
        });
        this.toolbar = new toolbarView_1.ToolbarView();
        this.postTabToolbar = new toolbarView_1.ToolbarView();
        this.settingsToolbar = new toolbarView_1.ToolbarView();
        this.element = dom_1.dom `
      <tabbed-pane>
        <vbox>
          <hbox style="flex: none">
            ${this.toolbar.element}
            <tab-strip>
              ${this._tabStrip.element}
              ${this.postTabToolbar.element}
            </tab-strip>
            ${this.settingsToolbar.element}
          </hbox>
          <tab-content>
          </tab-content>  
        </vbox>
      </tabbed-pane>
    `;
        this._contentElement = this.element.$('tab-content');
        this._tabStrip.onSelectionChanged((tabs) => {
            if (!tabs.length)
                return;
            this._contentElement.textContent = '';
            this._contentElement.appendChild(tabs[0].content());
            this._onSelectedEmitter.fire(tabs[0]);
        });
    }
    render(tab) {
        const result = dom_1.dom `
      <tab-element style="--tab-color: ${tab.color || 'var(--color)'}">
        <tab-label>${tab.label}</tab-label>
      </tab-element>
    `;
        if (tab.closable) {
            const closeElement = dom_1.dom `
        <tab-close class="codicon codicon-close"></tab-close>
      `;
            closeElement.addEventListener('click', e => {
                e.stopPropagation();
                e.stopImmediatePropagation();
                this._onCloseRequestEmitter.fire(tab);
            });
            result.appendChild(closeElement);
        }
        return result;
    }
    appendTab(tab) {
        this._tabStrip.append(tab);
        if (!this._tabStrip.selection().length)
            this._tabStrip.setSelection(tab);
    }
    selectTab(tab) {
        this._tabStrip.setSelection(tab);
    }
    updateTab(tab) {
        this._tabStrip.update(tab);
    }
    removeTab(tab) {
        this._tabStrip.delete(tab);
    }
    removeAllTabs() {
        this._tabStrip.clear();
    }
    selectedTab() {
        return this._tabStrip.selection()[0];
    }
    tabs() {
        return this._tabStrip.entries();
    }
}
exports.TabbedPane = TabbedPane;
//# sourceMappingURL=tabbedPane.js.map
"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkTab = void 0;
const dom_1 = require("../components/dom");
const listView_1 = require("../components/listView");
require("./networkTab.css");
class NetworkTab {
    constructor() {
        this.label = 'Network';
        this._listView = new listView_1.ListView(this);
        this.element = dom_1.dom `
      <network-tab>
        ${this._listView.element}
      </network-tab>
    `;
        this._listView.element.addEventListener('keydown', e => {
            const selected = this._listView.selection()[0];
            if (!selected)
                return;
            const expandable = this._listView.renderedElement(selected).$('pw-expandable');
            if (e.key === 'ArrowLeft')
                expandable.setExpanded(false);
            if (e.key === 'ArrowRight')
                expandable.setExpanded(true);
        });
    }
    render(resource, element) {
        if (element)
            return element;
        const resourceElement = dom_1.dom `
      <network-request slot="title">
        <pw-expandable style="width: 100%;">
          <request-title slot="title"><div>${resource.url}</div></request-title>
          <request-details slot="body">${resource.responseHeaders.map(pair => `${pair.name}: ${pair.value}`).join('\n')}</request-details>
        </pw-expandable>
    </network-request>`;
        const expandable = resourceElement.$('pw-expandable');
        resourceElement.$('request-title').addEventListener('click', () => expandable.setExpanded(!expandable.expanded()));
        return resourceElement;
    }
    async setAction(actionEntry) {
        this._listView.clear();
        if (actionEntry)
            this._listView.appendAll(actionEntry.resources);
    }
    content() {
        return this.element;
    }
}
exports.NetworkTab = NetworkTab;
//# sourceMappingURL=networkTab.js.map